% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lu_ml_superpc_time_varying.R
\name{lu_ml_superpc_time_varying}
\alias{lu_ml_superpc_time_varying}
\title{Time-Varying Supervised PCA Model for Land Use and House Price Prediction}
\usage{
lu_ml_superpc_time_varying(DT.hp, DT.lu, repeats = 5, folds = 5, seed = 1234)
}
\arguments{
\item{DT.hp}{A \code{data.table} containing house price data with columns \code{GEOID},
\code{index} (Date), and \code{hp.target} (house price target variable).}

\item{DT.lu}{A \code{data.table} containing land use data with \code{GEOID} as the first
column and other columns representing land use features.}

\item{repeats}{An integer specifying the number of times to repeat the k-fold
cross-validation. Defaults to 5.}

\item{folds}{An integer specifying the number of folds for cross-validation.
Defaults to 5.}

\item{seed}{An integer seed for reproducibility of random sampling and cross-validation
folds. Defaults to 1234.}
}
\value{
A \code{data.table} containing the original house price data
(\code{DT.hp}) merged with out-of-sample results from the supervised
PCA model. The column \code{lu_ml_superpc1} contains the first supervised
principal component score (i.e., the projected value) computed
for each test observation. These scores are computed out-of-sample:
the principal component factor loadings (i.e., the weights on the
selected features) are estimated from the training folds, and the
scores are then calculated by applying those loadings to the
held-out test data.
}
\description{
This function trains a supervised principal component regression model using the
\code{superpc} package to predict house prices from time-varying land use data. It performs
repeated k-fold cross-validation to tune the feature selection threshold and computes
first supervised principal component for east test dataset out-of-sample.
}
\details{
The function performs the following steps:
\enumerate{
\item Orders house price and land use data by GEOID and time index.
\item Merges land use and house price data and filters out any GEOIDs not present in both.
\item Constructs repeated k-fold cross-validation splits across GEOIDs for each time index.
\item For each time index:
\itemize{
\item Trains a supervised PCA model using \code{superpc.train} on the training folds.
\item Uses \code{superpc.cv} to select the optimal threshold \eqn{\theta}.
\item Computes both out-of-sample predictions (\code{"continuous"}) and the first component
scores (\code{"components"}) using \code{superpc.predict}.
}
\item Aggregates the predictions and component scores across all folds and repeats.
}

The function uses \code{future} and \code{future.apply} to parallelize model estimation across folds and repeats.
}
\examples{
\dontrun{
library(data.table)

# Load house price and land use data
data(dt_mian_sufi_2014)
data(dt_cnty_lu_2010)

dt_mian_sufi_2014 <- dt_mian_sufi_2014[
  , .(GEOID = fips, index = as.Date("2002-01-01"),
      hp.target = house.net.worth)][!is.na(hp.target)]

dt_cnty_lu_2010 <- dt_cnty_lu_2010[
  , .(GEOID, unavailable = .SD),
  .SDcols = grep("unavailable", names(dt_cnty_lu_2010), value = TRUE)]

# Run the model using Supervised PCA
out <- lu_ml_superpc_time_varying(
  DT.hp = dt_mian_sufi_2014,
  DT.lu = dt_cnty_lu_2010,
  seed = 42
)


# Correlation between PC1 and house prices
cor(out$hp.target, out$lu_superpc1)
}

}
