% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lu_ml_xgboost_time_varying.R
\name{lu_ml_xgboost_time_varying}
\alias{lu_ml_xgboost_time_varying}
\title{Time-Varying XGBoost Model for Land Use and House Price Prediction}
\usage{
lu_ml_xgboost_time_varying(
  DT.hp,
  DT.lu,
  repeats = 5,
  folds = 5,
  compute.lu.ml.parts = FALSE,
  seed = 1234
)
}
\arguments{
\item{DT.hp}{A data.table containing house price data with columns 'GEOID',
'index' (Date), and 'hp.target' (house price target variable).}

\item{DT.lu}{A data.table containing land use data with 'GEOID' as the first
column and other columns representing land use features.}

\item{repeats}{An integer specifying the number of times to repeat the k-fold
cross-validation. Defaults to 5.}

\item{folds}{An integer specifying the number of folds for cross-validation.
Defaults to 5.}

\item{compute.lu.ml.parts}{A logical value indicating whether to compute
predictions for specific land use components. Defaults to FALSE.}

\item{seed}{An integer seed for reproducibility of random sampling and cross-validation
folds. Defaults to 1234.}
}
\value{
A data.table containing the original house price data (\code{DT.hp}) merged
with out-of-sample predictions from the XGBoost model. If
\code{compute.lu.ml.parts} is TRUE, it also includes predictions for land use
components (parts, total, slope, water, wetlands).
}
\description{
This function trains an XGBoost model to predict house prices using time-varying
land use data. It performs repeated k-fold cross-validation to assess model
performance and can optionally compute predictions based on specific land use
components (parts, total, slope, water, wetlands).
}
\details{
The function performs the following steps:
\enumerate{
\item Orders the house price data by GEOID and index.
\item Checks for missing values in the house price target.
\item Removes 'saiz.circle' variables from the land use data.
\item Subsets both data.tables to ensure they have the same GEOIDs.
\item Performs various data integrity checks.
\item Sets up repeated k-fold cross-validation.
\item For each time index, trains an XGBoost model on the training folds and
predicts on the test folds.
\item Optionally, computes predictions for specific land use components.
\item Merges the predictions with the original house price data.
}

The function uses early stopping during XGBoost training to prevent overfitting.
It also utilizes parallel processing via the \code{future} package to speed up
computation.
}
\examples{
\dontrun{
library(data.table)
library(lu.ml)

# Load the Mian-Sufi 2014 data
data(dt_mian_sufi_2014)

# Load the county-level land unavailability data for 2010
data(dt_cnty_lu_2010)

# Prepare the Mian-Sufi data: select relevant columns, rename, and remove NAs
dt_mian_sufi_2014 <- dt_mian_sufi_2014 |>
  _[, .(GEOID = fips, index = as.Date("2002-01-01"),
        hp.target = house.net.worth)] |>
  _[!is.na(hp.target)]

# Prepare the land unavailability data: select GEOID and land unavailability columns
dt_cnty_lu_2010 <- dt_cnty_lu_2010 |>
  _[, .(GEOID, unavailable = .SD),
    .SDcols = grep("unavailable", names(dt_cnty_lu_2010), value = TRUE)]

# Run the lu_ml_xgboost_time_varying function to generate an instrument
out <- lu_ml_xgboost_time_varying(DT.hp = dt_mian_sufi_2014, DT.lu = dt_cnty_lu_2010)

# Calculate and print the correlation between the house price target and the generated instrument
print(paste("Correlation:", cor(out[, hp.target], out[, lu_ml_xgboost])))

# Print the resulting data.table
print(out)
}

}
